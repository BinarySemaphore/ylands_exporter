
  var Last_Index;
  var Index_Limit;
  var State_Running_Entities;
  var State_Running_Groups;
  var State_PostRun;
  var All_Entities;
  var All_Groups;
  var Batch_Size;

  //@YEvent
  function init() {
    Last_Index = 0;
    Index_Limit = 0;
    State_Running_Entities = false;
    State_Running_Groups = false;
    State_PostRun = false;
    All_Entities = [];
    All_Groups = [];
    Batch_Size = 0;
  }

//@YEvent
function onToolStart () {
  YEditor.showProgressScreen("Creating and Writing Data for Entities", 
    () => {
      State_Running_Entities = false;
      State_Running_Groups = false;
      State_PostRun = false;
    }
  );
  State_Running_Entities = true;
  State_Running_Groups = false;
  State_PostRun = false;
  All_Entities = YWorld.getAllEntities();
  All_Groups = YWorld.getAllGroups();
  Batch_Size = 1000;
  Index_Limit = All_Entities.length;
  Last_Index = 0;
  YDebug.log("Getting Scene Data...");
  YDebug.log("Export Scene (below):");
  YDebug.log("{");
}
function Remove_Trailing_Comma_2 (Data_String_2) {
  let Output = Data_String_2;
  if (Output.endsWith(",")) {
    Output = Output.substr(0, Output.length - 1);
  } else if (Output.endsWith(", ")) {
    Output = Output.substr(0, Output.length - 2);
  }
  return Output;
}
function Get_Entity_Data_String (Entity) {
  let Output = "";
  Output = Output + "\"" + YObject.getId(Entity) + "\": {";
  Output = Output + "\"type\": \"entity\", ";
  Output = Output + "\"name\": \"" + Entity.name + "\", ";
  Output = Output + "\"blockdef\": \"" + Entity.type.id + "\", ";
  if (YGroup.getParentGroup(Entity)) {
    Output = Output + "\"parent\": \"" + YObject.getId(YGroup.getParentGroup(Entity)) + "\", ";
  }
  let Position = Entity.position;
  Output = Output + "\"position\": [" + Position.x + ", " + Position.y + ", " + Position.z + "], ";
  let Rotation = Entity.rotation;
  Output = Output + "\"rotation\": [" + Rotation.x + ", " + Rotation.y + ", " + Rotation.z + "], ";
  Output = Output + "\"colors\": [";
  Output = Output + Entity.getColor(0) + ", ";
  Output = Output + Entity.getColor(1) + ", ";
  Output = Output + Entity.getColor(2);
  Output = Output + "]";
  Output = Output + "}, ";
  return Output;
}
function Get_Group_Data_String (Group) {
  let Output = "";
  Output = Output + "\"" + YObject.getId(Group) + "\": {";
  Output = Output + "\"type\": \"group\", ";
  Output = Output + "\"name\": \"" + Group.name + "\", ";
  if (YGroup.getParentGroup(Group)) {
    Output = Output + "\"parent\": \"" + YObject.getId(YGroup.getParentGroup(Group)) + "\", ";
  }
  let Position = Group.position;
  Output = Output + "\"position\": [" + Position.x + ", " + Position.y + ", " + Position.z + "], ";
  let Rotation = Group.rotation;
  Output = Output + "\"rotation\": [" + Rotation.x + ", " + Rotation.y + ", " + Rotation.z + "], ";
  let BB_Center = YEditor.getBoxCenter(Group);
  Output = Output + "\"bb-center-offset\": [" + BB_Center.x + ", " + BB_Center.y + ", " + BB_Center.z + "], ";
  let BB_Dims = YEditor.getBoxDimensions(Group);
  Output = Output + "\"bb-dimensions\": [" + BB_Dims.x + ", " + BB_Dims.y + ", " + BB_Dims.z + "]";
  Output = Output + "}, ";
  return Output;
}
//@YEvent
function onUpdate (Delta_time) {
  if (State_Running_Entities) {
    YEditor.setProgressValue(Last_Index / Index_Limit);
    /*
    Ylands doesn't handle string growing well, so capture batch alone and do one concat
    */
    let Batch_Data_String = "";
    let Index_from = Last_Index;
    let Index_to = Last_Index + Batch_Size;
    let Index_by = 1;
    for (let Index = Index_from; Index < Index_to; Index += Index_by)
    {
      if (Index >= Index_Limit) {
        break;
      }
      let Entity = All_Entities[Index];
      Batch_Data_String = Batch_Data_String.concat(Get_Entity_Data_String(Entity));
    }
    Last_Index = Last_Index + Batch_Size;
    if (Last_Index >= Index_Limit) {
      YEditor.setProgressLabel("Creating and Writing Data for Groups");
      Last_Index = 0;
      Index_Limit = All_Groups.length;
      if (Index_Limit == 0) {
        Batch_Data_String = Remove_Trailing_Comma_2(Batch_Data_String);
      }
      State_Running_Entities = false;
      State_Running_Groups = true;
    }
    YDebug.log(Batch_Data_String);
  } else if (State_Running_Groups) {
    YEditor.setProgressValue(Last_Index / Index_Limit);
    /*
    Ylands doesn't handle string growing well, so capture batch alone and do one concat
    */
    let Batch_Data_String = "";
    let Index_from = Last_Index;
    let Index_to = Last_Index + Batch_Size;
    let Index_by = 1;
    for (let Index = Index_from; Index < Index_to; Index += Index_by)
    {
      if (Index >= Index_Limit) {
        break;
      }
      let Group = All_Groups[Index];
      Batch_Data_String = Batch_Data_String.concat(Get_Group_Data_String(Group));
    }
    Last_Index = Last_Index + Batch_Size;
    if (Last_Index >= Index_Limit) {
      Batch_Data_String = Remove_Trailing_Comma_2(Batch_Data_String);
      State_Running_Groups = false;
      State_PostRun = true;
    }
    YDebug.log(Batch_Data_String);
  } else if (State_PostRun) {
    YDebug.log("}");
    YDebug.localConsole("Done");
    YDebug.localConsole("Open Export JSON at: " + "/Steam/steamapps/common/Ylands/Ylands_Data/log_userscript_ct.txt");
    State_PostRun = false;
    YEditor.finishProgressScreen();
  }
}

