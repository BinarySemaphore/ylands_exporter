
  var Batch_Size;
  var Last_ID;
  var State_Running;
  var ID_Limit;
  var State_PostRun;
  var First_Element;

  //@YEvent
  function init() {
    Batch_Size = 0;
    Last_ID = 0;
    State_Running = false;
    ID_Limit = 0;
    State_PostRun = false;
    First_Element = false;
  }

//@YEvent
function onToolStart () {
  YEditor.showProgressScreen("Spawn All Entities Temporarily to Get Info", 
    () => {
      State_Running = false;
      State_PostRun = false;
    }
  );
  State_Running = true;
  State_PostRun = false;
  First_Element = true;
  Batch_Size = 500;
  ID_Limit = 100000;
  Last_ID = 0;
  YDebug.log("Getting Entity Data...");
  YDebug.log("Export Block Ref (below):");
  YDebug.log("{");
}
//@YEvent
function onUpdate (Delta_time) {
  if (State_Running) {
    YEditor.setProgressValue(Last_ID / 10000);
    /*
    Ylands doesn't handle string growing well, so capture batch alone and do one concat
    */
    let Batch_Data_String = ", ";
    if (First_Element) {
      Batch_Data_String = "";
      First_Element = false;
    }
    let Spawned_Entities = [];
    let ID_from = Last_ID;
    let ID_to = Last_ID + Batch_Size;
    let ID_by = 1;
    for (let ID = ID_from; ID < ID_to; ID += ID_by)
    {
      if (ID >= ID_Limit) {
        break;
      }
      let Entity_Type = YEntityType.get(ID);
      if ((Entity_Type !== null) && (Entity_Type != "PROJECT TABLE")) {
        let Entity = YEntity.spawnEntity(Entity_Type, 1, new YVector3(0, 0, 0), new YVector3(0, 0, 0));
        if (Entity == null) {
          continue;
        }
        Batch_Data_String = Batch_Data_String.concat(Get_Entity_Data_String(Entity, ID));
        Spawned_Entities.push(Entity);
      }
    }
    Last_ID = Last_ID + Batch_Size;
    YEditor.deleteObjects(Spawned_Entities);
    Batch_Data_String = Remove_Trailing_Comma(Batch_Data_String);
    if (Last_ID >= ID_Limit) {
      State_Running = false;
      State_PostRun = true;
    }
    if (Batch_Data_String.length > 0) {
      YDebug.log(Batch_Data_String);
    }
  } else if (State_PostRun) {
    YDebug.log("}");
    YDebug.localConsole("Done");
    YDebug.localConsole("Open Export JSON at: " + "/Steam/steamapps/common/Ylands/Ylands_Data/log_userscript_ct.txt");
    State_PostRun = false;
    YEditor.finishProgressScreen();
  }
}
function Get_Entity_Data_String (Entity, ID) {
  let Output = "";
  Output = Output + "\"" + ID + "\": {";
  Output = Output + "\"type\": \"" + toString(Entity.type).replace("\"", "\\\"") + "\", ";
  let Size = YBlock.getSize(Entity.type);
  Output = Output + "\"size\": [" + Size.x + ", " + Size.y + ", " + Size.z + "], ";
  Output = Output + "\"shape\": \"" + YBlock.getShape(Entity.type) + "\", ";
  Output = Output + "\"material\": \"" + YBlock.getMaterial(Entity.type) + "\", ";
  Output = Output + "\"colors\": [";
  Output = Output + Entity.getColor(0) + ", ";
  Output = Output + Entity.getColor(1) + ", ";
  Output = Output + Entity.getColor(2);
  Output = Output + "], ";
  let BB_Center = YEditor.getBoxCenter(Entity);
  Output = Output + "\"bb-center-offset\": [" + BB_Center.x + ", " + BB_Center.y + ", " + BB_Center.z + "], ";
  let BB_Dims = YEditor.getBoxDimensions(Entity);
  Output = Output + "\"bb-dimensions\": [" + BB_Dims.x + ", " + BB_Dims.y + ", " + BB_Dims.z + "]";
  Output = Output + "}, ";
  return Output;
}
function Remove_Trailing_Comma (Data_String_2) {
  let Output = Data_String_2;
  if (Output.endsWith(",")) {
    Output = Output.substr(0, Output.length - 1);
  } else if (Output.endsWith(", ")) {
    Output = Output.substr(0, Output.length - 2);
  }
  return Output;
}

